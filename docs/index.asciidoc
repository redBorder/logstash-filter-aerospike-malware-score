:plugin: example
:type: filter

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

== logstash-filter-aerospike-malware-score

=== Example filter plugin

[,logstash]
----
filter{
  aerospike-malware-score {
    hash_field => 'hash'
    malware_weights_file => '/opt/rb/var/rb-sequence-oozie/conf/weights.yml'
    aerospike_config_file => '/opt/rb/var/www/rb-rails/config/aerospike.yml'
    aerospike_server => ''
    namespace => 'malware'
    set_hash_scores => 'hashScores'
    set_control_files => 'controlFiles'
    loader_score_name => 'fb_metascan'
    loader_type => 'fb'
    ttl => 0
    s3_bin_name => 's3_uuids'
  }
}
----

=== Description

This is an example of Logstash filter plugin for updating malware scores in Aerospike.

[id="plugins-{type}s-{plugin}-options"]
==== Filter Configuration Options

[cols="<,<,<",options="header",]
|====================================================================================
|               Setting                                     |   Input type  |Required
| <<plugins-{type}s-{plugin}-hash_field>>                   |String         |Yes
| <<plugins-{type}s-{plugin}-malware_weights_file>>         |String         |No
| <<plugins-{type}s-{plugin}-aerospike_config_file>>        |String         |No
| <<plugins-{type}s-{plugin}-aerospike_server>>             |String         |No
| <<plugins-{type}s-{plugin}-namespace>>                    |String         |No
| <<plugins-{type}s-{plugin}-set_hash_scores>>              |String         |No
| <<plugins-{type}s-{plugin}-set_control_files>>            |String         |No
| <<plugins-{type}s-{plugin}-loader_score_name>>            |String         |No
| <<plugins-{type}s-{plugin}-loader_type>>                  |String         |No
| <<plugins-{type}s-{plugin}-ttl>>                          |Number         |No
| <<plugins-{type}s-{plugin}-s3_bin_name>>                  |String         |No
|====================================================================================

[id="plugins-{type}s-{plugin}-hash_field"]
===== `hash_field`

  * Value type is `String`.
  * Default value is `"hash"`

Logstash event field (key) where the hash is located.

[id="plugins-{type}s-{plugin}-malware_weights_file"]
===== `malware_weights_file`

* Value type is `String`.
* Default value is `"/opt/rb/var/rb-sequence-oozie/conf/weights.yml"`

Path where is the configuration file with scores' weight.

[id="plugins-{type}s-{plugin}-aerospike_config_file"]
===== `aerospike_config_file`

* Value type is `String`.
* Default value is `"/opt/rb/var/www/rb-rails/config/aerospike.yml"`

Path where is Aerospike's configuration file.

[id="plugins-{type}s-{plugin}-aerospike_server"]
===== `aerospike_server`

* Value type is `String`.
* Default value is `""`

Aerospike server in the form "host:port".

[id="plugins-{type}s-{plugin}-namespace"]
===== `namespace`

* Value type is `String`.
* Default value is `"malware"`

Namespace is a Database name in Aerospike.

[id="plugins-{type}s-{plugin}-set_hash_scores"]
===== `set_hash_scores`

* Value type is `String`.
* Default value is `"hashScores"`

Set in Aerospike is similar to table in a relational database.
It is the set where files' scores are stored.

[id="plugins-{type}s-{plugin}-set_control_files"]
===== `set_control_files`

* Value type is `String`.
* Default value is `"controlFiles"`

It is the set to control the files.

[id="plugins-{type}s-{plugin}-loader_score_name"]
===== `loader_score_name`

* Value type is `String`.
* *Required*
* Default value is `""`

Logstash event field (key) with loader's name.

[id="plugins-{type}s-{plugin}-loader_type"]
===== `loader_type`

* Value type is `String`.
* Default value is `"fb"`

Which kind of loader is: 'rt', 'fb','sb'.

[id="plugins-{type}s-{plugin}-ttl"]
===== `ttl`

* Value type is `Number`.
* Default value is `0`

Aerospike provides the ability to expire a record by
setting its TTL (Time To Live) from a client. The TTL
value is the number of seconds that a record will live
(from the current time) before being removed by the server.

*Record Expiration values (TTL)*

[cols="^.^,<",options="header",]
|===================================================================
|  TTL | Description
|  -2  | Do not change ttl when record is updated.
Supported by Aerospike server versions >= 3.10.1.
|  -1  | Never expire. Supported by Aerospike server versions >= 3.1.4.
|   0  | Default to namespace configuration variable “default-ttl” on the server.
|  >0  | Actual ttl in seconds (some client support the following time units S, M, H, D)
|===================================================================


[id="plugins-{type}s-{plugin}-s3_bin_name"]
===== `s3_bin_name`

* Value type is `String`.
* Default value is `"s3_uuids"`

Aerospike bin's name where is going to be updated file's location.

[id="plugins-{type}s-{plugin}-common-options"]
